version: "3"

services:
  # Creating keys:
  # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_server
  # - ./.acrakeys/acra-connector/${ACRA_CLIENT_ID}_server.pub
  acra-keymaker_server:
    # You can specify a docker image tag in the ACRA_DOCKER_IMAGE_TAG
    # environment variable or run the default 'latest' images
    image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
    # We do not need a network to generate keys at all
    network_mode: "none"
    environment:
      # INSECURE!!! You MUST define your own ACRA_SERVER_MASTER_KEY and ACRA_CONNECTOR_MASTER_KEY
      # The default is for testing purposes only
      ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
    volumes:
      # Mount the whole ./.acrakeys directory to be able generate keys and
      # place them in services' subdirectories
      - ./.acrakeys:/keys
    # Please specify ACRA_CLIENT_ID environment variable, otherwise run with
    # default 'signservice' client id
    command: >-
      --client_id=${ACRA_CLIENT_ID:-signservice}
      --generate_acraserver_keys
      --keys_output_dir=/keys/acra-server
      --keys_public_output_dir=/keys/acra-connector
      --keystore=v1

  # Creating keys:
  # - ./.acrakeys/acra-connector/${ACRA_CLIENT_ID}
  # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}.pub
  acra-keymaker_connector:
    image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
    network_mode: "none"
    environment:
      ACRA_MASTER_KEY: ${ACRA_CONNECTOR_MASTER_KEY:-MElBVnhEeTd3b29JMFVVcnhGMXJPT3BxZUVwWW5wS3E=}
    volumes:
      - ./.acrakeys:/keys
    command: >-
      --client_id=${ACRA_CLIENT_ID:-signservice}
      --generate_acraconnector_keys
      --keys_output_dir=/keys/acra-connector
      --keys_public_output_dir=/keys/acra-server
      --keystore=v1

  # Creating keys:
  # - ./.acrakeys/acra-connector/${ACRA_CLIENT_ID}_storage
  # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_strorage.pub
  acra-keymaker_writer:
    image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
    network_mode: "none"
    environment:
      ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-MElBVnhEeTd3b29JMFVVcnhGMXJPT3BxZUVwWW5wS3E=}
    volumes:
      - ./.acrakeys:/keys
    command: >-
      --client_id=${ACRA_CLIENT_ID:-signservice}
      --generate_acrawriter_keys
      --keys_output_dir=/keys/acra-server
      --keys_public_output_dir=/keys/acra-server
      --keystore=v1

  acra-server:
    image: "cossacklabs/acra-server:${ACRA_DOCKER_IMAGE_TAG:-latest}"
    depends_on:
      - acra-keymaker_server
      - acra-keymaker_connector
      - acra-keymaker_writer
      - postgres
    # Do not expose ports, as acra server will be used through connector
    #
    # We need connector to handle TLS connection
    ports: []
    environment:
      ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-UHZ3VUNNeTJ0SEFhbWVjNkt4eDdVYkc2WnNpUTlYa0E=}
      GODEBUG: "netdns=go"
    volumes:
      # Mount the directory with only the keys for this service. Must be
      # rewriteable in case of using API, otherwise should be read-only.
      - ./.acrakeys/acra-server:/keys
      # Directory with configuration, rewriteable
      - ./acra-configs/acra-server:/configs
    command: >-
      --config_file=/configs/acra-server.yaml

  acra-connector:
    image: "cossacklabs/acra-connector:${ACRA_DOCKER_IMAGE_TAG:-latest}"
    restart: always
    depends_on:
      - acra-keymaker_server
      - acra-keymaker_connector
      - acra-server
    # Open the port outside only for demonstration purposes only
    # (connections between containers are performing within isolated
    # networks)
    ports:
      - "9494:5432"
    environment:
      ACRA_MASTER_KEY: ${ACRA_CONNECTOR_MASTER_KEY:-MElBVnhEeTd3b29JMFVVcnhGMXJPT3BxZUVwWW5wS3E=}
      GODEBUG: "netdns=go"
    volumes:
      # Mount the directory with only the keys for this service
      - ./.acrakeys/acra-connector:/keys:ro
    command: >-
      --acraserver_connection_host=acra-server
      --keys_dir=/keys
      --client_id=${ACRA_CLIENT_ID:-signservice}
      --incoming_connection_string=tcp://0.0.0.0:5432
      -v
      -d

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: test42
      POSTGRES_USER: test42
      POSTGRES_PASSWORD: test42
    ports:
      - 5454:5432
